syntax = "proto3";

package thread;

import "exam.proto";

option go_package = "./proto";

service Thread {
  rpc CreateThread(ThreadRequestCreateBody) returns (ThreadBody) {}
  rpc GetThread() returns {}
  rpc GetThreadById(ThreadIdRequestBody) returns (ThreadBody) {}

  rpc UpvoteThread(ThreadIdRequestBody) returns (ThreadBody) {}
  rpc DownvoteThread(ThreadIdRequestBody) returns (ThreadBody) {}

  rpc UpvoteProblem(ThreadProblemIdRequestBody) returns (ProblemBody) {}
  rpc DownvoteProblem(ThreadProblemIdRequestBody) returns (ProblemBody) {}

  rpc UpvoteAnswer(ThreadAnswerIdRequestBody) returns (AnswerBody) {}
  rpc DownvoteAnswer(ThreadAnswerIdRequestBody) returns (AnswerBody) {}

  rpc AddAnswer() returns () {}

  // rpc GetAllThreadsByExamProperty(exam.ExamPropertyRequestBody) returns (ThreadBodyArr) {}

}

message ThreadBody {
  string _id = 1;
  string exam_id = 2;
  string course_id = 3;
  int32 upvoted = 4;
  int32 downvoted = 5;
  repeated Problem problems = 6;
  repeated Answer answers = 7;
}

message ProblemBody {
  string id = 1;
  string title = 2;
  string body = 3;
  string uploaded_user = 4;
  int32 upvoted = 5;
  int32 downvoted = 6;
}

message AnswerBody {
  string id = 1;
  stirng body = 2;
  int32 upvoted = 3;
  int32 downvoted = 4;
}

message ThreadRequestCreateBody {
  string course_id = 1;
  int32 year = 2;
  string semester = 3;
  string term = 4;

  string uploaded_user = 5;

  string question = 6;
  optional string answer = 7;
}

message ThreadCreateBody {
  string exam_id = 1;
  string course_id = 2;
  int32 upvoted = 3;
  int32 downvoted = 4;
  repeated Problem problems = 5; 
  repeated Answer answers = 6;
}

message ThreadUpdateBody {
  string exam_id = 1;
  string course_id = 2;
  int32 upvoted = 3;
  int32 downvoted = 4;
  repeated Problem problems = 5;
  repeated Answer answers = 6;
}

message ThreadIdRequestBody {
  string thread_id = 1;
}

message ThreadProblemIdRequestBody {
  string problem_id = 1;
}

message ThreadAnswerIdRequestBody {
  string answer_id = 1;
}

message Problem {
  optional string title = 1;
  optional string body = 2;
  optional string uploaded_user = 3;
  optional int32 upvoted = 4;
  optional int32 downvoted = 5;
}

message Answer {
  optional string body = 1;
  optional int32 upvoted = 2;
  optional int32 downvoted = 3;
}

message ThreadBodyArr {
  repeated ThreadBody messages = 1;
}
