// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: exam.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExamBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId       string   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	CourseId  string   `protobuf:"bytes,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Year      int32    `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`        // 2022, 2021, 2020, ...
	Semester  string   `protobuf:"bytes,4,opt,name=semester,proto3" json:"semester,omitempty"` // S1, S2
	Term      string   `protobuf:"bytes,5,opt,name=term,proto3" json:"term,omitempty"`         // Mid | Final
	ThreadIds []string `protobuf:"bytes,6,rep,name=thread_ids,json=threadIds,proto3" json:"thread_ids,omitempty"`
}

func (x *ExamBody) Reset() {
	*x = ExamBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exam_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamBody) ProtoMessage() {}

func (x *ExamBody) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamBody.ProtoReflect.Descriptor instead.
func (*ExamBody) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{0}
}

func (x *ExamBody) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *ExamBody) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *ExamBody) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ExamBody) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *ExamBody) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *ExamBody) GetThreadIds() []string {
	if x != nil {
		return x.ThreadIds
	}
	return nil
}

type GetAllExamBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllExamBody) Reset() {
	*x = GetAllExamBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exam_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllExamBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllExamBody) ProtoMessage() {}

func (x *GetAllExamBody) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllExamBody.ProtoReflect.Descriptor instead.
func (*GetAllExamBody) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{1}
}

type ExamCreateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseId string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Year     int32  `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`        // 2022, 2021, 2020, ...
	Semester string `protobuf:"bytes,3,opt,name=semester,proto3" json:"semester,omitempty"` // S1, S2
	Term     string `protobuf:"bytes,4,opt,name=term,proto3" json:"term,omitempty"`         // Mid | Final
}

func (x *ExamCreateBody) Reset() {
	*x = ExamCreateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exam_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamCreateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamCreateBody) ProtoMessage() {}

func (x *ExamCreateBody) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamCreateBody.ProtoReflect.Descriptor instead.
func (*ExamCreateBody) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{2}
}

func (x *ExamCreateBody) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *ExamCreateBody) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ExamCreateBody) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *ExamCreateBody) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

type ExamUpdateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseId  string   `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Year      int32    `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`        // 2022, 2021, 2020, ...
	Semester  string   `protobuf:"bytes,3,opt,name=semester,proto3" json:"semester,omitempty"` // S1, S2
	Term      string   `protobuf:"bytes,4,opt,name=term,proto3" json:"term,omitempty"`         // Mid | Final
	ThreadIds []string `protobuf:"bytes,5,rep,name=thread_ids,json=threadIds,proto3" json:"thread_ids,omitempty"`
}

func (x *ExamUpdateBody) Reset() {
	*x = ExamUpdateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exam_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamUpdateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamUpdateBody) ProtoMessage() {}

func (x *ExamUpdateBody) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamUpdateBody.ProtoReflect.Descriptor instead.
func (*ExamUpdateBody) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{3}
}

func (x *ExamUpdateBody) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *ExamUpdateBody) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ExamUpdateBody) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *ExamUpdateBody) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *ExamUpdateBody) GetThreadIds() []string {
	if x != nil {
		return x.ThreadIds
	}
	return nil
}

type ExamCourseIdRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseId string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
}

func (x *ExamCourseIdRequestBody) Reset() {
	*x = ExamCourseIdRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exam_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamCourseIdRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamCourseIdRequestBody) ProtoMessage() {}

func (x *ExamCourseIdRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamCourseIdRequestBody.ProtoReflect.Descriptor instead.
func (*ExamCourseIdRequestBody) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{4}
}

func (x *ExamCourseIdRequestBody) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

type ExamPropertyRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year     *int32  `protobuf:"varint,1,opt,name=year,proto3,oneof" json:"year,omitempty"`                        // 2022, 2021, 2020, ...
	Semester *string `protobuf:"bytes,2,opt,name=semester,proto3,oneof" json:"semester,omitempty"`                 // S1, S2
	Term     *string `protobuf:"bytes,3,opt,name=term,proto3,oneof" json:"term,omitempty"`                         // Mid | Final
	CourseId *string `protobuf:"bytes,4,opt,name=course_id,json=courseId,proto3,oneof" json:"course_id,omitempty"` // 211011
}

func (x *ExamPropertyRequestBody) Reset() {
	*x = ExamPropertyRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exam_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamPropertyRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamPropertyRequestBody) ProtoMessage() {}

func (x *ExamPropertyRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamPropertyRequestBody.ProtoReflect.Descriptor instead.
func (*ExamPropertyRequestBody) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{5}
}

func (x *ExamPropertyRequestBody) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *ExamPropertyRequestBody) GetSemester() string {
	if x != nil && x.Semester != nil {
		return *x.Semester
	}
	return ""
}

func (x *ExamPropertyRequestBody) GetTerm() string {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return ""
}

func (x *ExamPropertyRequestBody) GetCourseId() string {
	if x != nil && x.CourseId != nil {
		return *x.CourseId
	}
	return ""
}

type ExamRequestUpdateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year     int32           `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`        // 2022, 2021, 2020, ...
	Semester string          `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"` // S1, S2
	Term     string          `protobuf:"bytes,3,opt,name=term,proto3" json:"term,omitempty"`         // Mid | Final
	Body     *ExamUpdateBody `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ExamRequestUpdateBody) Reset() {
	*x = ExamRequestUpdateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exam_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamRequestUpdateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamRequestUpdateBody) ProtoMessage() {}

func (x *ExamRequestUpdateBody) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamRequestUpdateBody.ProtoReflect.Descriptor instead.
func (*ExamRequestUpdateBody) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{6}
}

func (x *ExamRequestUpdateBody) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ExamRequestUpdateBody) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *ExamRequestUpdateBody) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *ExamRequestUpdateBody) GetBody() *ExamUpdateBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type ExamBodyArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ExamBody `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ExamBodyArr) Reset() {
	*x = ExamBodyArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exam_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamBodyArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamBodyArr) ProtoMessage() {}

func (x *ExamBodyArr) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamBodyArr.ProtoReflect.Descriptor instead.
func (*ExamBodyArr) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{7}
}

func (x *ExamBodyArr) GetMessages() []*ExamBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

var File_exam_proto protoreflect.FileDescriptor

var file_exam_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x65, 0x78,
	0x61, 0x6d, 0x22, 0x9b, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x73,
	0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0x71, 0x0a, 0x0e, 0x45, 0x78, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x61, 0x6d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x73, 0x22, 0x36, 0x0a, 0x17, 0x45, 0x78, 0x61, 0x6d,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64,
	0x22, 0xbb, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x17, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x85,
	0x01, 0x0a, 0x15, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x39, 0x0a, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x6f,
	0x64, 0x79, 0x41, 0x72, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x32, 0x98, 0x02, 0x0a, 0x04, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e,
	0x45, 0x78, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x0e,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x11, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x41, 0x72, 0x72, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x79,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1b,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x0e, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x79, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x0e, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_exam_proto_rawDescOnce sync.Once
	file_exam_proto_rawDescData = file_exam_proto_rawDesc
)

func file_exam_proto_rawDescGZIP() []byte {
	file_exam_proto_rawDescOnce.Do(func() {
		file_exam_proto_rawDescData = protoimpl.X.CompressGZIP(file_exam_proto_rawDescData)
	})
	return file_exam_proto_rawDescData
}

var file_exam_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_exam_proto_goTypes = []interface{}{
	(*ExamBody)(nil),                // 0: exam.ExamBody
	(*GetAllExamBody)(nil),          // 1: exam.GetAllExamBody
	(*ExamCreateBody)(nil),          // 2: exam.ExamCreateBody
	(*ExamUpdateBody)(nil),          // 3: exam.ExamUpdateBody
	(*ExamCourseIdRequestBody)(nil), // 4: exam.ExamCourseIdRequestBody
	(*ExamPropertyRequestBody)(nil), // 5: exam.ExamPropertyRequestBody
	(*ExamRequestUpdateBody)(nil),   // 6: exam.ExamRequestUpdateBody
	(*ExamBodyArr)(nil),             // 7: exam.ExamBodyArr
}
var file_exam_proto_depIdxs = []int32{
	3, // 0: exam.ExamRequestUpdateBody.body:type_name -> exam.ExamUpdateBody
	0, // 1: exam.ExamBodyArr.messages:type_name -> exam.ExamBody
	2, // 2: exam.Exam.CreateExam:input_type -> exam.ExamCreateBody
	5, // 3: exam.Exam.GetExams:input_type -> exam.ExamPropertyRequestBody
	6, // 4: exam.Exam.UpdateExamByCourseProperty:input_type -> exam.ExamRequestUpdateBody
	5, // 5: exam.Exam.DeleteExamByCourseProperty:input_type -> exam.ExamPropertyRequestBody
	0, // 6: exam.Exam.CreateExam:output_type -> exam.ExamBody
	7, // 7: exam.Exam.GetExams:output_type -> exam.ExamBodyArr
	0, // 8: exam.Exam.UpdateExamByCourseProperty:output_type -> exam.ExamBody
	0, // 9: exam.Exam.DeleteExamByCourseProperty:output_type -> exam.ExamBody
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_exam_proto_init() }
func file_exam_proto_init() {
	if File_exam_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_exam_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exam_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllExamBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exam_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamCreateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exam_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamUpdateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exam_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamCourseIdRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exam_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamPropertyRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exam_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamRequestUpdateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exam_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamBodyArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_exam_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exam_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_exam_proto_goTypes,
		DependencyIndexes: file_exam_proto_depIdxs,
		MessageInfos:      file_exam_proto_msgTypes,
	}.Build()
	File_exam_proto = out.File
	file_exam_proto_rawDesc = nil
	file_exam_proto_goTypes = nil
	file_exam_proto_depIdxs = nil
}
