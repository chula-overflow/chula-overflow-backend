// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: exam.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExamClient is the client API for Exam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExamClient interface {
	GetExam(ctx context.Context, in *GetExamRequest, opts ...grpc.CallOption) (*GetExamResponse, error)
}

type examClient struct {
	cc grpc.ClientConnInterface
}

func NewExamClient(cc grpc.ClientConnInterface) ExamClient {
	return &examClient{cc}
}

func (c *examClient) GetExam(ctx context.Context, in *GetExamRequest, opts ...grpc.CallOption) (*GetExamResponse, error) {
	out := new(GetExamResponse)
	err := c.cc.Invoke(ctx, "/exam.Exam/GetExam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExamServer is the server API for Exam service.
// All implementations should embed UnimplementedExamServer
// for forward compatibility
type ExamServer interface {
	GetExam(context.Context, *GetExamRequest) (*GetExamResponse, error)
}

// UnimplementedExamServer should be embedded to have forward compatible implementations.
type UnimplementedExamServer struct {
}

func (UnimplementedExamServer) GetExam(context.Context, *GetExamRequest) (*GetExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExam not implemented")
}

// UnsafeExamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExamServer will
// result in compilation errors.
type UnsafeExamServer interface {
	mustEmbedUnimplementedExamServer()
}

func RegisterExamServer(s grpc.ServiceRegistrar, srv ExamServer) {
	s.RegisterService(&Exam_ServiceDesc, srv)
}

func _Exam_GetExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServer).GetExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exam.Exam/GetExam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServer).GetExam(ctx, req.(*GetExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Exam_ServiceDesc is the grpc.ServiceDesc for Exam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exam.Exam",
	HandlerType: (*ExamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExam",
			Handler:    _Exam_GetExam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exam.proto",
}
