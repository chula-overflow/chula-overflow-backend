// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: thread.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThreadBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId       string     `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	ExamId    string     `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CourseId  string     `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Upvoted   int32      `protobuf:"varint,4,opt,name=upvoted,proto3" json:"upvoted,omitempty"`
	Downvoted int32      `protobuf:"varint,5,opt,name=downvoted,proto3" json:"downvoted,omitempty"`
	Problems  []*Problem `protobuf:"bytes,6,rep,name=problems,proto3" json:"problems,omitempty"`
	Answers   []*Answer  `protobuf:"bytes,7,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *ThreadBody) Reset() {
	*x = ThreadBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadBody) ProtoMessage() {}

func (x *ThreadBody) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadBody.ProtoReflect.Descriptor instead.
func (*ThreadBody) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{0}
}

func (x *ThreadBody) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *ThreadBody) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ThreadBody) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *ThreadBody) GetUpvoted() int32 {
	if x != nil {
		return x.Upvoted
	}
	return 0
}

func (x *ThreadBody) GetDownvoted() int32 {
	if x != nil {
		return x.Downvoted
	}
	return 0
}

func (x *ThreadBody) GetProblems() []*Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *ThreadBody) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type ThreadRequestCreateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseId     string  `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Year         int32   `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	Semester     string  `protobuf:"bytes,3,opt,name=semester,proto3" json:"semester,omitempty"`
	Term         string  `protobuf:"bytes,4,opt,name=term,proto3" json:"term,omitempty"`
	UploadedUser string  `protobuf:"bytes,5,opt,name=uploaded_user,json=uploadedUser,proto3" json:"uploaded_user,omitempty"`
	Question     string  `protobuf:"bytes,6,opt,name=question,proto3" json:"question,omitempty"`
	Answer       *string `protobuf:"bytes,7,opt,name=answer,proto3,oneof" json:"answer,omitempty"`
}

func (x *ThreadRequestCreateBody) Reset() {
	*x = ThreadRequestCreateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadRequestCreateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadRequestCreateBody) ProtoMessage() {}

func (x *ThreadRequestCreateBody) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadRequestCreateBody.ProtoReflect.Descriptor instead.
func (*ThreadRequestCreateBody) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{1}
}

func (x *ThreadRequestCreateBody) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *ThreadRequestCreateBody) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ThreadRequestCreateBody) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *ThreadRequestCreateBody) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *ThreadRequestCreateBody) GetUploadedUser() string {
	if x != nil {
		return x.UploadedUser
	}
	return ""
}

func (x *ThreadRequestCreateBody) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *ThreadRequestCreateBody) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

type ThreadCreateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId    string     `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CourseId  string     `protobuf:"bytes,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Upvoted   int32      `protobuf:"varint,3,opt,name=upvoted,proto3" json:"upvoted,omitempty"`
	Downvoted int32      `protobuf:"varint,4,opt,name=downvoted,proto3" json:"downvoted,omitempty"`
	Problems  []*Problem `protobuf:"bytes,5,rep,name=problems,proto3" json:"problems,omitempty"`
	Answers   []*Answer  `protobuf:"bytes,6,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *ThreadCreateBody) Reset() {
	*x = ThreadCreateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadCreateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadCreateBody) ProtoMessage() {}

func (x *ThreadCreateBody) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadCreateBody.ProtoReflect.Descriptor instead.
func (*ThreadCreateBody) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{2}
}

func (x *ThreadCreateBody) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ThreadCreateBody) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *ThreadCreateBody) GetUpvoted() int32 {
	if x != nil {
		return x.Upvoted
	}
	return 0
}

func (x *ThreadCreateBody) GetDownvoted() int32 {
	if x != nil {
		return x.Downvoted
	}
	return 0
}

func (x *ThreadCreateBody) GetProblems() []*Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *ThreadCreateBody) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type ThreadUpdateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId    string     `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CourseId  string     `protobuf:"bytes,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Upvoted   int32      `protobuf:"varint,3,opt,name=upvoted,proto3" json:"upvoted,omitempty"`
	Downvoted int32      `protobuf:"varint,4,opt,name=downvoted,proto3" json:"downvoted,omitempty"`
	Problems  []*Problem `protobuf:"bytes,5,rep,name=problems,proto3" json:"problems,omitempty"`
	Answers   []*Answer  `protobuf:"bytes,6,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *ThreadUpdateBody) Reset() {
	*x = ThreadUpdateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadUpdateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadUpdateBody) ProtoMessage() {}

func (x *ThreadUpdateBody) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadUpdateBody.ProtoReflect.Descriptor instead.
func (*ThreadUpdateBody) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{3}
}

func (x *ThreadUpdateBody) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ThreadUpdateBody) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *ThreadUpdateBody) GetUpvoted() int32 {
	if x != nil {
		return x.Upvoted
	}
	return 0
}

func (x *ThreadUpdateBody) GetDownvoted() int32 {
	if x != nil {
		return x.Downvoted
	}
	return 0
}

func (x *ThreadUpdateBody) GetProblems() []*Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *ThreadUpdateBody) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type ThreadIdRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *ThreadIdRequestBody) Reset() {
	*x = ThreadIdRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadIdRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadIdRequestBody) ProtoMessage() {}

func (x *ThreadIdRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadIdRequestBody.ProtoReflect.Descriptor instead.
func (*ThreadIdRequestBody) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{4}
}

func (x *ThreadIdRequestBody) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

type Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Body         *string `protobuf:"bytes,2,opt,name=body,proto3,oneof" json:"body,omitempty"`
	UploadedUser *string `protobuf:"bytes,3,opt,name=uploaded_user,json=uploadedUser,proto3,oneof" json:"uploaded_user,omitempty"`
	Upvoted      *int32  `protobuf:"varint,4,opt,name=upvoted,proto3,oneof" json:"upvoted,omitempty"`
	Downvoted    *int32  `protobuf:"varint,5,opt,name=downvoted,proto3,oneof" json:"downvoted,omitempty"`
}

func (x *Problem) Reset() {
	*x = Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{5}
}

func (x *Problem) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Problem) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *Problem) GetUploadedUser() string {
	if x != nil && x.UploadedUser != nil {
		return *x.UploadedUser
	}
	return ""
}

func (x *Problem) GetUpvoted() int32 {
	if x != nil && x.Upvoted != nil {
		return *x.Upvoted
	}
	return 0
}

func (x *Problem) GetDownvoted() int32 {
	if x != nil && x.Downvoted != nil {
		return *x.Downvoted
	}
	return 0
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body      *string `protobuf:"bytes,1,opt,name=body,proto3,oneof" json:"body,omitempty"`
	Upvoted   *int32  `protobuf:"varint,2,opt,name=upvoted,proto3,oneof" json:"upvoted,omitempty"`
	Downvoted *int32  `protobuf:"varint,3,opt,name=downvoted,proto3,oneof" json:"downvoted,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{6}
}

func (x *Answer) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *Answer) GetUpvoted() int32 {
	if x != nil && x.Upvoted != nil {
		return *x.Upvoted
	}
	return 0
}

func (x *Answer) GetDownvoted() int32 {
	if x != nil && x.Downvoted != nil {
		return *x.Downvoted
	}
	return 0
}

type ThreadBodyArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ThreadBody `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ThreadBodyArr) Reset() {
	*x = ThreadBodyArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadBodyArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadBodyArr) ProtoMessage() {}

func (x *ThreadBodyArr) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadBodyArr.ProtoReflect.Descriptor instead.
func (*ThreadBodyArr) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{7}
}

func (x *ThreadBodyArr) GetMessages() []*ThreadBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

var File_thread_proto protoreflect.FileDescriptor

var file_thread_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x0a, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe2, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x28, 0x0a,
	0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x17, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xd7, 0x01,
	0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x28, 0x0a,
	0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x22, 0x32, 0x0a, 0x13, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x22, 0x86, 0x01, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x41, 0x72, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x32, 0xf2, 0x02, 0x0a, 0x06, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x1a, 0x12, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x55, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x2e, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x12, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b,
	0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x12, 0x2e, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x42, 0x79, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a,
	0x15, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x41, 0x72, 0x72, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1f, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x12, 0x2e, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x00, 0x42,
	0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_thread_proto_rawDescOnce sync.Once
	file_thread_proto_rawDescData = file_thread_proto_rawDesc
)

func file_thread_proto_rawDescGZIP() []byte {
	file_thread_proto_rawDescOnce.Do(func() {
		file_thread_proto_rawDescData = protoimpl.X.CompressGZIP(file_thread_proto_rawDescData)
	})
	return file_thread_proto_rawDescData
}

var file_thread_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_thread_proto_goTypes = []interface{}{
	(*ThreadBody)(nil),              // 0: thread.ThreadBody
	(*ThreadRequestCreateBody)(nil), // 1: thread.ThreadRequestCreateBody
	(*ThreadCreateBody)(nil),        // 2: thread.ThreadCreateBody
	(*ThreadUpdateBody)(nil),        // 3: thread.ThreadUpdateBody
	(*ThreadIdRequestBody)(nil),     // 4: thread.ThreadIdRequestBody
	(*Problem)(nil),                 // 5: thread.Problem
	(*Answer)(nil),                  // 6: thread.Answer
	(*ThreadBodyArr)(nil),           // 7: thread.ThreadBodyArr
	(*ExamPropertyRequestBody)(nil), // 8: exam.ExamPropertyRequestBody
}
var file_thread_proto_depIdxs = []int32{
	5,  // 0: thread.ThreadBody.problems:type_name -> thread.Problem
	6,  // 1: thread.ThreadBody.answers:type_name -> thread.Answer
	5,  // 2: thread.ThreadCreateBody.problems:type_name -> thread.Problem
	6,  // 3: thread.ThreadCreateBody.answers:type_name -> thread.Answer
	5,  // 4: thread.ThreadUpdateBody.problems:type_name -> thread.Problem
	6,  // 5: thread.ThreadUpdateBody.answers:type_name -> thread.Answer
	0,  // 6: thread.ThreadBodyArr.messages:type_name -> thread.ThreadBody
	4,  // 7: thread.Thread.DownvoteThread:input_type -> thread.ThreadIdRequestBody
	4,  // 8: thread.Thread.UpvoteThread:input_type -> thread.ThreadIdRequestBody
	4,  // 9: thread.Thread.GetThreadById:input_type -> thread.ThreadIdRequestBody
	8,  // 10: thread.Thread.GetAllThreadsByExamProperty:input_type -> exam.ExamPropertyRequestBody
	1,  // 11: thread.Thread.CreateThread:input_type -> thread.ThreadRequestCreateBody
	0,  // 12: thread.Thread.DownvoteThread:output_type -> thread.ThreadBody
	0,  // 13: thread.Thread.UpvoteThread:output_type -> thread.ThreadBody
	0,  // 14: thread.Thread.GetThreadById:output_type -> thread.ThreadBody
	7,  // 15: thread.Thread.GetAllThreadsByExamProperty:output_type -> thread.ThreadBodyArr
	0,  // 16: thread.Thread.CreateThread:output_type -> thread.ThreadBody
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_thread_proto_init() }
func file_thread_proto_init() {
	if File_thread_proto != nil {
		return
	}
	file_exam_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_thread_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadRequestCreateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadCreateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadUpdateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadIdRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadBodyArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_thread_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_thread_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_thread_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_thread_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_thread_proto_goTypes,
		DependencyIndexes: file_thread_proto_depIdxs,
		MessageInfos:      file_thread_proto_msgTypes,
	}.Build()
	File_thread_proto = out.File
	file_thread_proto_rawDesc = nil
	file_thread_proto_goTypes = nil
	file_thread_proto_depIdxs = nil
}
