// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: thread.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThreadClient is the client API for Thread service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreadClient interface {
	DownvoteThread(ctx context.Context, in *ThreadIdRequestBody, opts ...grpc.CallOption) (*ThreadBody, error)
	UpvoteThread(ctx context.Context, in *ThreadIdRequestBody, opts ...grpc.CallOption) (*ThreadBody, error)
	GetThreadById(ctx context.Context, in *ThreadIdRequestBody, opts ...grpc.CallOption) (*ThreadBody, error)
	GetAllThreadsByExamProperty(ctx context.Context, in *ExamPropertyRequestBody, opts ...grpc.CallOption) (*ThreadBodyArr, error)
	CreateThread(ctx context.Context, in *ThreadRequestCreateBody, opts ...grpc.CallOption) (*ThreadBody, error)
}

type threadClient struct {
	cc grpc.ClientConnInterface
}

func NewThreadClient(cc grpc.ClientConnInterface) ThreadClient {
	return &threadClient{cc}
}

func (c *threadClient) DownvoteThread(ctx context.Context, in *ThreadIdRequestBody, opts ...grpc.CallOption) (*ThreadBody, error) {
	out := new(ThreadBody)
	err := c.cc.Invoke(ctx, "/thread.Thread/DownvoteThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) UpvoteThread(ctx context.Context, in *ThreadIdRequestBody, opts ...grpc.CallOption) (*ThreadBody, error) {
	out := new(ThreadBody)
	err := c.cc.Invoke(ctx, "/thread.Thread/UpvoteThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) GetThreadById(ctx context.Context, in *ThreadIdRequestBody, opts ...grpc.CallOption) (*ThreadBody, error) {
	out := new(ThreadBody)
	err := c.cc.Invoke(ctx, "/thread.Thread/GetThreadById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) GetAllThreadsByExamProperty(ctx context.Context, in *ExamPropertyRequestBody, opts ...grpc.CallOption) (*ThreadBodyArr, error) {
	out := new(ThreadBodyArr)
	err := c.cc.Invoke(ctx, "/thread.Thread/GetAllThreadsByExamProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) CreateThread(ctx context.Context, in *ThreadRequestCreateBody, opts ...grpc.CallOption) (*ThreadBody, error) {
	out := new(ThreadBody)
	err := c.cc.Invoke(ctx, "/thread.Thread/CreateThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadServer is the server API for Thread service.
// All implementations should embed UnimplementedThreadServer
// for forward compatibility
type ThreadServer interface {
	DownvoteThread(context.Context, *ThreadIdRequestBody) (*ThreadBody, error)
	UpvoteThread(context.Context, *ThreadIdRequestBody) (*ThreadBody, error)
	GetThreadById(context.Context, *ThreadIdRequestBody) (*ThreadBody, error)
	GetAllThreadsByExamProperty(context.Context, *ExamPropertyRequestBody) (*ThreadBodyArr, error)
	CreateThread(context.Context, *ThreadRequestCreateBody) (*ThreadBody, error)
}

// UnimplementedThreadServer should be embedded to have forward compatible implementations.
type UnimplementedThreadServer struct {
}

func (UnimplementedThreadServer) DownvoteThread(context.Context, *ThreadIdRequestBody) (*ThreadBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownvoteThread not implemented")
}
func (UnimplementedThreadServer) UpvoteThread(context.Context, *ThreadIdRequestBody) (*ThreadBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpvoteThread not implemented")
}
func (UnimplementedThreadServer) GetThreadById(context.Context, *ThreadIdRequestBody) (*ThreadBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreadById not implemented")
}
func (UnimplementedThreadServer) GetAllThreadsByExamProperty(context.Context, *ExamPropertyRequestBody) (*ThreadBodyArr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllThreadsByExamProperty not implemented")
}
func (UnimplementedThreadServer) CreateThread(context.Context, *ThreadRequestCreateBody) (*ThreadBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}

// UnsafeThreadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreadServer will
// result in compilation errors.
type UnsafeThreadServer interface {
	mustEmbedUnimplementedThreadServer()
}

func RegisterThreadServer(s grpc.ServiceRegistrar, srv ThreadServer) {
	s.RegisterService(&Thread_ServiceDesc, srv)
}

func _Thread_DownvoteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadIdRequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).DownvoteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thread.Thread/DownvoteThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).DownvoteThread(ctx, req.(*ThreadIdRequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_UpvoteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadIdRequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).UpvoteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thread.Thread/UpvoteThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).UpvoteThread(ctx, req.(*ThreadIdRequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_GetThreadById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadIdRequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).GetThreadById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thread.Thread/GetThreadById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).GetThreadById(ctx, req.(*ThreadIdRequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_GetAllThreadsByExamProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExamPropertyRequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).GetAllThreadsByExamProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thread.Thread/GetAllThreadsByExamProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).GetAllThreadsByExamProperty(ctx, req.(*ExamPropertyRequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadRequestCreateBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thread.Thread/CreateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).CreateThread(ctx, req.(*ThreadRequestCreateBody))
	}
	return interceptor(ctx, in, info, handler)
}

// Thread_ServiceDesc is the grpc.ServiceDesc for Thread service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thread_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thread.Thread",
	HandlerType: (*ThreadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownvoteThread",
			Handler:    _Thread_DownvoteThread_Handler,
		},
		{
			MethodName: "UpvoteThread",
			Handler:    _Thread_UpvoteThread_Handler,
		},
		{
			MethodName: "GetThreadById",
			Handler:    _Thread_GetThreadById_Handler,
		},
		{
			MethodName: "GetAllThreadsByExamProperty",
			Handler:    _Thread_GetAllThreadsByExamProperty_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _Thread_CreateThread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thread.proto",
}
