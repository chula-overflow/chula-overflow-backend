// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: nlp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NlpClient is the client API for Nlp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NlpClient interface {
	Tokenize(ctx context.Context, in *TokenizeParagraph, opts ...grpc.CallOption) (*TokenizeSentences, error)
	Embed(ctx context.Context, in *EmbedSentence, opts ...grpc.CallOption) (*EncodedSentence, error)
	Measure(ctx context.Context, in *MeasureVectors, opts ...grpc.CallOption) (*MeasureSimilarity, error)
}

type nlpClient struct {
	cc grpc.ClientConnInterface
}

func NewNlpClient(cc grpc.ClientConnInterface) NlpClient {
	return &nlpClient{cc}
}

func (c *nlpClient) Tokenize(ctx context.Context, in *TokenizeParagraph, opts ...grpc.CallOption) (*TokenizeSentences, error) {
	out := new(TokenizeSentences)
	err := c.cc.Invoke(ctx, "/nlp.Nlp/Tokenize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nlpClient) Embed(ctx context.Context, in *EmbedSentence, opts ...grpc.CallOption) (*EncodedSentence, error) {
	out := new(EncodedSentence)
	err := c.cc.Invoke(ctx, "/nlp.Nlp/Embed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nlpClient) Measure(ctx context.Context, in *MeasureVectors, opts ...grpc.CallOption) (*MeasureSimilarity, error) {
	out := new(MeasureSimilarity)
	err := c.cc.Invoke(ctx, "/nlp.Nlp/Measure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NlpServer is the server API for Nlp service.
// All implementations should embed UnimplementedNlpServer
// for forward compatibility
type NlpServer interface {
	Tokenize(context.Context, *TokenizeParagraph) (*TokenizeSentences, error)
	Embed(context.Context, *EmbedSentence) (*EncodedSentence, error)
	Measure(context.Context, *MeasureVectors) (*MeasureSimilarity, error)
}

// UnimplementedNlpServer should be embedded to have forward compatible implementations.
type UnimplementedNlpServer struct {
}

func (UnimplementedNlpServer) Tokenize(context.Context, *TokenizeParagraph) (*TokenizeSentences, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokenize not implemented")
}
func (UnimplementedNlpServer) Embed(context.Context, *EmbedSentence) (*EncodedSentence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Embed not implemented")
}
func (UnimplementedNlpServer) Measure(context.Context, *MeasureVectors) (*MeasureSimilarity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Measure not implemented")
}

// UnsafeNlpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NlpServer will
// result in compilation errors.
type UnsafeNlpServer interface {
	mustEmbedUnimplementedNlpServer()
}

func RegisterNlpServer(s grpc.ServiceRegistrar, srv NlpServer) {
	s.RegisterService(&Nlp_ServiceDesc, srv)
}

func _Nlp_Tokenize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenizeParagraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NlpServer).Tokenize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlp.Nlp/Tokenize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NlpServer).Tokenize(ctx, req.(*TokenizeParagraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nlp_Embed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedSentence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NlpServer).Embed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlp.Nlp/Embed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NlpServer).Embed(ctx, req.(*EmbedSentence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nlp_Measure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasureVectors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NlpServer).Measure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlp.Nlp/Measure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NlpServer).Measure(ctx, req.(*MeasureVectors))
	}
	return interceptor(ctx, in, info, handler)
}

// Nlp_ServiceDesc is the grpc.ServiceDesc for Nlp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nlp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nlp.Nlp",
	HandlerType: (*NlpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tokenize",
			Handler:    _Nlp_Tokenize_Handler,
		},
		{
			MethodName: "Embed",
			Handler:    _Nlp_Embed_Handler,
		},
		{
			MethodName: "Measure",
			Handler:    _Nlp_Measure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nlp.proto",
}
