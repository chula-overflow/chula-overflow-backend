basePath: /
definitions:
  dto.Answer:
    properties:
      body:
        example: I dont know I think it's B
        type: string
      downvoted:
        example: 17
        type: integer
      upvoted:
        example: 13
        type: integer
    required:
    - body
    - downvoted
    - upvoted
    type: object
  dto.CourseBody:
    properties:
      _id:
        example: 507f1f77bcf86cd799439011
        type: string
      course_codename:
        example: "2112101"
        type: string
      course_id:
        example: 507f1f77bcf86cd799439011
        type: string
      course_name:
        example: Calculus
        type: string
      exam_ids:
        example:
        - 507f1f77bcf86cd799439011
        - 507f1f77bcf86cd799439011
        items:
          type: string
        type: array
    required:
    - _id
    - course_codename
    - course_id
    - course_name
    type: object
  dto.CourseCreateBody:
    properties:
      course_codename:
        example: "2112101"
        type: string
      course_id:
        example: 507f1f77bcf86cd799439011
        type: string
      course_name:
        example: Calculus
        type: string
    required:
    - course_codename
    - course_id
    - course_name
    type: object
  dto.CourseUpdateBody:
    properties:
      course_codename:
        example: "2112101"
        type: string
      course_name:
        example: Calculus
        type: string
      exam_ids:
        example:
        - 507f1f77bcf86cd799439011
        - 507f1f77bcf86cd799439011
        items:
          type: string
        type: array
    type: object
  dto.ExamBody:
    properties:
      _id:
        example: 507f1f77bcf86cd799439011
        type: string
      course_id:
        example: 507f1f77bcf86cd799439011
        type: string
      semester:
        example: S1
        type: string
      term:
        example: Final
        type: string
      thread_ids:
        example:
        - 507f1f77bcf86cd799439011
        - 507f1f77bcf86cd799439011
        items:
          type: string
        type: array
      year:
        example: 2011
        type: integer
    required:
    - _id
    - course_id
    - semester
    - term
    - thread_ids
    - year
    type: object
  dto.ExamCreateBody:
    properties:
      course_id:
        example: 507f1f77bcf86cd799439011
        type: string
      semester:
        example: S1
        type: string
      term:
        example: Final
        type: string
      year:
        example: 2011
        type: integer
    required:
    - semester
    - term
    - year
    type: object
  dto.ExamUpdateBody:
    properties:
      course_id:
        example: 507f1f77bcf86cd799439011
        type: string
      thread_ids:
        example:
        - 507f1f77bcf86cd799439011
        - 507f1f77bcf86cd799439011
        items:
          type: string
        type: array
    type: object
  dto.Login:
    properties:
      email:
        example: 6530000021@student.chula.ac.th
        type: string
    required:
    - email
    type: object
  dto.MeResponse:
    properties:
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.Problem:
    properties:
      body:
        example: What is 'Monad'?
        type: string
      downvoted:
        example: 17
        type: integer
      title:
        example: Hard limit
        type: string
      uploaded_user:
        example: 507f1f77bcf86cd799439011
        type: string
      upvoted:
        example: 13
        type: integer
    required:
    - body
    - downvoted
    - title
    - uploaded_user
    - upvoted
    type: object
  dto.ThreadBody:
    properties:
      _id:
        example: 507f1f77bcf86cd799439011
        type: string
      answers:
        items:
          $ref: '#/definitions/dto.Answer'
        type: array
      course_id:
        example: 507f1f77bcf86cd799439011
        type: string
      downvoted:
        example: 13
        type: integer
      exam_id:
        example: 507f1f77bcf86cd799439011
        type: string
      problems:
        items:
          $ref: '#/definitions/dto.Problem'
        type: array
      upvoted:
        example: 17
        type: integer
    required:
    - _id
    - course_id
    - exam_id
    type: object
  dto.ThreadRequestCreateBody:
    properties:
      answer:
        example: Final
        type: string
      course_id:
        example: 507f1f77bcf86cd799439011
        type: string
      question:
        example: Final
        type: string
      semester:
        example: S1
        type: string
      term:
        example: Final
        type: string
      year:
        example: 2011
        type: integer
    required:
    - course_id
    - question
    - semester
    - term
    - year
    type: object
  dto.User:
    properties:
      email:
        example: 6530000021@student.chula.ac.th
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: Not over engineering at all
  termsOfService: http://swagger.io/terms/
  title: Chula Overflow Backend Doc
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: |-
        Login with given email session are store in cookie as 'sid'. If no email were found in database, it will create one.
        Cookies are automatically store in swag
        return 200 if client already has sid on.
      parameters:
      - description: email use for login
        format: email
        in: body
        name: login
        schema:
          $ref: '#/definitions/dto.Login'
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      summary: Login
      tags:
      - Auth
  /auth/me:
    get:
      description: Get current session detail
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MeResponse'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Me
      tags:
      - Auth
  /auth/revoke:
    get:
      description: Revoke session (expire session cookie from client)
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Revoke
      tags:
      - Auth
  /course:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CourseBody'
            type: array
      summary: Get all course
      tags:
      - Course
    post:
      consumes:
      - application/json
      parameters:
      - description: Course body
        in: body
        name: course_body
        required: true
        schema:
          $ref: '#/definitions/dto.CourseCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CourseBody'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      summary: Create Course
      tags:
      - Course
  /course/:course_id:
    delete:
      parameters:
      - description: Course id
        in: path
        name: Course_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/dto.CourseBody'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      summary: Delete course
      tags:
      - Course
    get:
      parameters:
      - description: Course id
        in: path
        name: course_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/dto.CourseBody'
        "404":
          description: Not Found
      summary: Get course
      tags:
      - Course
    put:
      parameters:
      - description: Update body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CourseUpdateBody'
      - description: Course id
        in: path
        name: course_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/dto.CourseBody'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      summary: Update course
      tags:
      - Course
  /exam:
    delete:
      parameters:
      - description: year
        in: query
        name: year
        required: true
        type: integer
      - description: semester
        in: query
        name: semester
        required: true
        type: string
      - description: term
        in: query
        name: term
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/dto.ExamBody'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      summary: Delete exam
      tags:
      - Exam
    get:
      description: |-
        Choose 1 type of these 3 types:

        Get all (No query)

        Query by course id (?course_id=...)

        Find by property (?year=...&semester=...&term=...) three of them must exist at the same request

        If many queries are provided, only the most specific will be returned.
      parameters:
      - description: year
        in: query
        name: year
        type: integer
      - description: semester
        in: query
        name: semester
        type: string
      - description: term
        in: query
        name: term
        type: string
      - description: Course id
        in: query
        name: course_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ExamBody'
            type: array
        "400":
          description: Bad Request
      summary: Get all exam
      tags:
      - Exam
    post:
      consumes:
      - application/json
      parameters:
      - description: Exam body
        in: body
        name: exam_body
        required: true
        schema:
          $ref: '#/definitions/dto.ExamCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ExamBody'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      summary: Create exam
      tags:
      - Exam
    put:
      parameters:
      - description: Update body
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/dto.ExamUpdateBody'
      - description: year
        in: query
        name: year
        required: true
        type: integer
      - description: semester
        in: query
        name: semester
        required: true
        type: string
      - description: term
        in: query
        name: term
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/dto.ExamBody'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      summary: Update exam
      tags:
      - Exam
  /thread:
    get:
      consumes:
      - application/json
      parameters:
      - description: year
        in: query
        name: year
        required: true
        type: integer
      - description: semester
        in: query
        name: semester
        required: true
        type: string
      - description: term
        in: query
        name: term
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ThreadBody'
            type: array
        "400":
          description: Bad Request
      summary: Get thread by property
      tags:
      - Thread
    post:
      parameters:
      - description: Thread body
        in: body
        name: thread_body
        required: true
        schema:
          $ref: '#/definitions/dto.ThreadRequestCreateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ThreadBody'
        "404":
          description: Not Found
      summary: Create thread
      tags:
      - Thread
  /thread/:thread_id:
    get:
      parameters:
      - description: Thread id
        in: path
        name: thread_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ThreadBody'
        "404":
          description: Not Found
      summary: Get thread by id
      tags:
      - Thread
  /thread/:thread_id/downvote:
    post:
      parameters:
      - description: thread id
        in: path
        name: thread_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ThreadBody'
        "400":
          description: Bad Request
      summary: Downvote thread
      tags:
      - Thread
  /thread/:thread_id/upvote:
    post:
      parameters:
      - description: thread id
        in: path
        name: thread_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ThreadBody'
        "400":
          description: Bad Request
      summary: Upvote thread
      tags:
      - Thread
swagger: "2.0"
