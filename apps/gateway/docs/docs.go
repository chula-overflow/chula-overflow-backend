// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login with given email",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "format": "email",
                        "description": "email use for login",
                        "name": "login",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "description": "Get current session detail",
                "tags": [
                    "Auth"
                ],
                "summary": "Me",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/auth/revoke": {
            "get": {
                "description": "Revoke session",
                "tags": [
                    "Auth"
                ],
                "summary": "Revoke",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/course": {
            "get": {
                "description": "get detail summary for all course",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Course"
                ],
                "summary": "GetAllCourseSummary",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CourseSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/course/:course_id": {
            "get": {
                "description": "Get specific course",
                "tags": [
                    "Course"
                ],
                "summary": "GetCourse",
                "parameters": [
                    {
                        "type": "string",
                        "description": "course ID",
                        "name": "course_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Course"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/exam/:exam_id": {
            "get": {
                "description": "Get specific exam",
                "tags": [
                    "Exam"
                ],
                "summary": "GetExam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "exam ID",
                        "name": "exam_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Exam"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Course": {
            "type": "object",
            "properties": {
                "course_name": {
                    "type": "string",
                    "example": "2110101 Calculus I"
                },
                "exams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ExamSummary"
                    }
                }
            }
        },
        "dto.CourseSummary": {
            "type": "object",
            "properties": {
                "course_id": {
                    "type": "string",
                    "example": "TODO!(MONGOOBJECTID)"
                },
                "course_name": {
                    "type": "string",
                    "example": "2011 - S1 - Final"
                },
                "thread_count": {
                    "type": "integer",
                    "example": 12
                }
            }
        },
        "dto.Exam": {
            "type": "object",
            "properties": {
                "exam_name": {
                    "type": "string",
                    "example": "2011 - S1 - Final"
                },
                "threads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ThreadSummary"
                    }
                }
            }
        },
        "dto.ExamSummary": {
            "type": "object",
            "properties": {
                "exam_id": {
                    "type": "string",
                    "example": "TODO!(MONGOOBJECTID)"
                },
                "exam_name": {
                    "type": "string",
                    "example": "2011 - S1 - Final"
                },
                "thread_count": {
                    "type": "integer",
                    "example": 12
                }
            }
        },
        "dto.Login": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "6530000021@student.chula.ac.th"
                }
            }
        },
        "dto.ThreadSummary": {
            "type": "object",
            "properties": {
                "downvote": {
                    "type": "integer",
                    "example": 12
                },
                "problem_description": {
                    "type": "string",
                    "example": "What is 'Monad'?"
                },
                "problem_name": {
                    "type": "string",
                    "example": "1+1=???"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "calculus",
                        "2110101",
                        "limit",
                        "hard"
                    ]
                },
                "thread_id": {
                    "type": "string",
                    "example": "TODO!(OBJECTID)"
                },
                "upvote": {
                    "type": "integer",
                    "example": 12
                }
            }
        },
        "dto.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "6530000021@student.chula.ac.th"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Chula Overflow Backend Doc",
	Description:      "Not over engineering at all",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
